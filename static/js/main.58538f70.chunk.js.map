{"version":3,"sources":["components/Grid.js","App.js","index.js"],"names":["Grid","dim","useState","Array","fill","map","grid","setGrid","running","setRunning","useEffect","setTimeout","play","setColor","row","col","temp","i","j","arr","count","checkNeighbour","style","display","flexDirection","gap","marginTop","gridTemplateColumns","rows","onClick","bind","width","height","border","borderStyle","backgroundColor","type","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAoKeA,MAhKf,WAAiB,IAAD,OACVC,EAAM,GACV,EAAwBC,mBACtBC,MAAMF,GACHG,OACAC,KAAI,kBAAMF,MAAMF,GAAKG,MAAK,OAH/B,mBAAOE,EAAP,KAAaC,EAAb,KAKA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACJF,GACFG,WAAWC,EAAM,OAElB,CAACJ,EAASF,IAEb,IAkDMO,EAAW,SAACC,EAAKC,GAGrB,IAFA,IAAIC,EAAI,YAAOV,GAENW,EAAI,EAAGA,EAAIhB,EAAKgB,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAKiB,IACvB,GAAID,IAAMH,GAAOI,IAAMH,EAAK,CAC1BC,EAAKC,GAAGC,IAAMF,EAAKC,GAAGC,GACtBX,EAAQS,GAER,QAKFJ,EAAO,WACX,IAAIO,EAAMb,EAAKD,KAAI,SAACS,EAAKG,GACvB,OAAOH,EAAIT,KAAI,SAACU,EAAKG,GACnB,IAAIE,EAnEa,SAACH,EAAGC,GACzB,IAAIE,EAAQ,EA+CZ,OA9CIH,EAAI,IACiB,IAAnBX,EAAKW,EAAI,GAAGC,KACdE,GAAS,GAGTH,EAAI,GAAKC,EAAI,IACY,IAAvBZ,EAAKW,EAAI,GAAGC,EAAI,KAClBE,GAAS,GAITH,EAAI,GAAKC,EAAIjB,KACY,IAAvBK,EAAKW,EAAI,GAAGC,EAAI,KAClBE,GAAS,GAGTH,EAAIhB,KACiB,IAAnBK,EAAKW,EAAI,GAAGC,KACdE,GAAS,GAITH,EAAIhB,IAAWiB,EAAI,IACM,IAAvBZ,EAAKW,EAAI,GAAGC,EAAI,KAClBE,GAAS,GAITH,EAAIhB,IAAWiB,EAAIjB,KACM,IAAvBK,EAAKW,EAAI,GAAGC,EAAI,KAClBE,GAAS,GAITF,EAAI,IACiB,IAAnBZ,EAAKW,GAAGC,EAAI,KACdE,GAAS,GAITF,EAAIjB,KACiB,IAAnBK,EAAKW,GAAGC,EAAI,KACdE,GAAS,GAINA,EAmBSC,CAAeJ,EAAGC,GAwB9B,OArBY,IAARH,GAAgBK,EAAQ,IAE1BL,GAAM,IAGI,IAARA,GAAgBK,GAAS,GAAKA,GAAS,IAEzCL,GAAM,IAII,IAARA,GAAgBK,EAAQ,IAE1BL,GAAM,IAII,IAARA,GAA2B,IAAVK,IAEnBL,GAAM,GAEDA,QAIXR,EAAQY,IAWV,OACE,sBACEG,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,UAAW,QALf,UAQE,qBACEJ,MAAO,CAAEC,QAAS,OAAQI,oBAAoB,UAAD,OAAY1B,EAAZ,WAD/C,SAGGK,EAAKD,KAAI,SAACuB,EAAMX,GACf,OAAOW,EAAKvB,KAAI,SAACU,EAAKG,GACpB,OACE,qBACEW,QAAShB,EAASiB,KAAK,EAAMb,EAAGC,GAChCI,MAAO,CACLS,MAAO,OACPC,OAAQ,OACRC,OAAQ,MACRC,YAAa,QACbC,iBAAgC,IAAf7B,EAAKW,GAAGC,GAAe,QAAU,kBAO9D,wBAAQW,QAtCK,WAEfpB,GAAYD,IAoCiB4B,KAAK,SAAhC,mBAGA,wBAAQP,QApCI,WACdpB,GAAYD,IAmCgB4B,KAAK,SAA/B,sBClJSC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.58538f70.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.development\";\n\nimport \"../styles/Grid.css\";\nfunction Grid() {\n  let dim = 20;\n  const [grid, setGrid] = useState(\n    Array(dim)\n      .fill()\n      .map(() => Array(dim).fill(false))\n  );\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    if (running) {\n      setTimeout(play, 100);\n    }\n  }, [running, grid]);\n\n  const checkNeighbour = (i, j) => {\n    let count = 0;\n    if (i > 0) {\n      if (grid[i - 1][j] === true) {\n        count += 1;\n      }\n    }\n    if (i > 0 && j > 0) {\n      if (grid[i - 1][j - 1] === true) {\n        count += 1;\n      }\n    }\n\n    if (i > 0 && j < dim - 1) {\n      if (grid[i - 1][j + 1] === true) {\n        count += 1;\n      }\n    }\n    if (i < dim - 1) {\n      if (grid[i + 1][j] === true) {\n        count += 1;\n      }\n    }\n\n    if (i < dim - 1 && j > 0) {\n      if (grid[i + 1][j - 1] === true) {\n        count += 1;\n      }\n    }\n\n    if (i < dim - 1 && j < dim - 1) {\n      if (grid[i + 1][j + 1] === true) {\n        count += 1;\n      }\n    }\n\n    if (j > 0) {\n      if (grid[i][j - 1] === true) {\n        count += 1;\n      }\n    }\n\n    if (j < dim - 1) {\n      if (grid[i][j + 1] === true) {\n        count += 1;\n      }\n    }\n\n    return count;\n  };\n  const setColor = (row, col) => {\n    let temp = [...grid];\n\n    for (let i = 0; i < dim; i++) {\n      for (let j = 0; j < dim; j++) {\n        if (i === row && j === col) {\n          temp[i][j] = !temp[i][j];\n          setGrid(temp);\n          // setPrevGrid(temp);\n          break;\n        }\n      }\n    }\n  };\n  const play = () => {\n    let arr = grid.map((row, i) => {\n      return row.map((col, j) => {\n        let count = checkNeighbour(i, j);\n\n        // case 1 cell alive and has less than two living neighbours\n        if (col === true && count < 2) {\n          // changeColor(i, j, false);\n          col = false;\n        }\n        // case 2 cell alive and has 2-3 neighbours\n        if (col === true && count >= 2 && count <= 3) {\n          // changeColor(i, j, true);\n          col = true;\n        }\n\n        //case 3 cell alive and has more than 3 neighbour\n        if (col === true && count > 3) {\n          // changeColor(i, j, false);\n          col = false;\n        }\n\n        //case 4 cell dead and has 3 live neighbours\n        if (col === false && count === 3) {\n          // changeColor(i, j, true);\n          col = true;\n        }\n        return col;\n      });\n    });\n\n    setGrid(arr);\n  };\n  const startSim = () => {\n    // setPrevGrid(grid);\n    setRunning(!running);\n    // setTimeout(startSim, 1500);\n  };\n  const stopSim = () => {\n    setRunning(!running);\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: \"20px\",\n        marginTop: \"20px\",\n      }}\n    >\n      <div\n        style={{ display: \"grid\", gridTemplateColumns: `repeat(${dim},25px)` }}\n      >\n        {grid.map((rows, i) => {\n          return rows.map((col, j) => {\n            return (\n              <div\n                onClick={setColor.bind(this, i, j)}\n                style={{\n                  width: \"25px\",\n                  height: \"25px\",\n                  border: \"1px\",\n                  borderStyle: \"solid\",\n                  backgroundColor: grid[i][j] === false ? \"white\" : \"blue\",\n                }}\n              ></div>\n            );\n          });\n        })}\n      </div>\n      <button onClick={startSim} type=\"button\">\n        Start\n      </button>\n      <button onClick={stopSim} type=\"button\">\n        Stop\n      </button>\n    </div>\n  );\n}\n\nexport default Grid;\n","import \"./styles/App.css\";\nimport Grid from \"./components/Grid\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}